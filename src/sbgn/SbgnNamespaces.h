/**
 * @file SbgnNamespaces.h
 * @brief Definition of the SbgnNamespaces class.
 * @author DEVISER
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML. Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2019 jointly by the following organizations:
 * 1. California Institute of Technology, Pasadena, CA, USA
 * 2. University of Heidelberg, Heidelberg, Germany
 *
 * Copyright (C) 2013-2018 jointly by the following organizations:
 * 1. California Institute of Technology, Pasadena, CA, USA
 * 2. EMBL European Bioinformatics Institute (EMBL-EBI), Hinxton, UK
 * 3. University of Heidelberg, Heidelberg, Germany
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 * 1. California Institute of Technology, Pasadena, CA, USA
 * 2. EMBL European Bioinformatics Institute (EMBL-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 * Pasadena, CA, USA
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 * 1. California Institute of Technology, Pasadena, CA, USA
 * 2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation. A copy of the license agreement is provided in the
 * file named "LICENSE.txt" included with this software distribution and also
 * available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 *
 * @class SbgnNamespaces
 * @sbmlbrief{} TODO:Definition of the SbgnNamespaces class.
 */


#ifndef SbgnNamespaces_h
#define SbgnNamespaces_h

#include <sbml/xml/XMLNamespaces.h>
#include <sbml/util/List.h>

#include <sbgn/common/common.h>
#include <sbgn/common/sbgnfwd.h>

#ifdef __cplusplus
namespace LIBSBGN_CPP_NAMESPACE 
{
  const unsigned int SBGN_DEFAULT_LEVEL   = 0;
  const unsigned int SBGN_DEFAULT_VERSION = 3;
  const char* const SBGN_XMLNS_L0V3   = "http://sbgn.org/libsbgn/0.3";
  const char* const SBGN_XMLNS_L0V2   = "http://sbgn.org/libsbgn/0.2";
  const char* const SBGN_XMLNS_L0V1   = "http://sbgn.org/libsbgn/pd/0.1";
}
#else
static const unsigned int SBGN_DEFAULT_LEVEL   = 0;
static const unsigned int SBGN_DEFAULT_VERSION = 3;
static const char* const SBGN_XMLNS_L0V3   = "http://sbgn.org/libsbgn/0.3";
static const char* const SBGN_XMLNS_L0V2   = "http://sbgn.org/libsbgn/0.2";
static const char* const SBGN_XMLNS_L0V1   = "http://sbgn.org/libsbgn/pd/0.1";
#endif

#ifdef __cplusplus

#include <string>
#include <stdexcept>

LIBSBGN_CPP_NAMESPACE_BEGIN

class LIBSBGN_EXTERN SbgnNamespaces
{
public:

  /**
   * Creates a new SbgnNamespaces object corresponding to the given SBGN
   * @p level and @p version.
   *
   * @param level the SBGN level
   * @param version the SBGN version
   * 
   */
  SbgnNamespaces(unsigned int level = SBGN_DEFAULT_LEVEL, 
                 unsigned int version = SBGN_DEFAULT_VERSION);


  /**
   * Destroys this SbgnNamespaces object.
   */
  virtual ~SbgnNamespaces();

  
  /**
   * Copy constructor; creates a copy of a SbgnNamespaces.
   * 
   * @param orig the SbgnNamespaces instance to copy.
   */
  SbgnNamespaces(const SbgnNamespaces& orig);


  /**
   * Assignment operator for SbgnNamespaces.
   */
  SbgnNamespaces& operator=(const SbgnNamespaces& rhs);


  /**
   * Creates and returns a deep copy of this SbgnNamespaces object.
   *
   * @return the (deep) copy of this SbgnNamespaces object.
   */
  virtual SbgnNamespaces* clone () const;


  /**
   * Returns a string representing the SBGN XML namespace for the 
   * given @p level and @p version of SBGN.
   *
   * @param level the SBGN level
   * @param version the SBGN version
   *
   * @return a string representing the SBGN namespace that reflects the
   * SBGN Level and Version specified.
   */
  static std::string getSbgnNamespaceURI(unsigned int level,
                                         unsigned int version);

  
  /**
   * Returns a list of all supported SbgnNamespaces in this version of 
   * libsbgn. 
   * 
   * @return a list with supported SBGN namespaces. 
   */
  static const List* getSupportedNamespaces();


  /**
   * Frees the list of supported namespaces as generated by
   * getSupportedNamespaces().
   *
   * @param supportedNS the list to be freed.
   *
   * @copydetails doc_note_static_methods
   */
  static void freeSbgnNamespaces(List * supportedNS);


  /**
   * Returns a string representing the SBGN XML namespace of this
   * object.
   *
   * @return a string representing the SBGN namespace that reflects the
   * SBGN Level and Version of this object.
   */
  virtual std::string getURI() const;


  /**
   * Get the SBGN Level of this SbgnNamespaces object.
   *
   * @return the SBGN Level of this SbgnNamespaces object.
   */
  unsigned int getLevel();


  /**
   * Get the SBGN Level of this SbgnNamespaces object.
   *
   * @return the SBGN Level of this SbgnNamespaces object.
   */
  unsigned int getLevel() const;


  /**
   * Get the SBGN Version of this SbgnNamespaces object.
   *
   * @return the SBGN Version of this SbgnNamespaces object.
   */
  unsigned int getVersion();


  /**
   * Get the SBGN Version of this SbgnNamespaces object.
   *
   * @return the SBGN Version of this SbgnNamespaces object.
   */
  unsigned int getVersion() const;


  /**
   * Get the XML namespaces list for this SbgnNamespaces object.
   *
   * @return the XML namespaces of this SbgnNamespaces object.
   */
  XMLNamespaces * getNamespaces();


  /**
   * Get the XML namespaces list for this SbgnNamespaces object.
   * 
   * @return the XML namespaces of this SbgnNamespaces object.
   */
  const XMLNamespaces * getNamespaces() const;


  /**
   * Add the given XML namespaces list to the set of namespaces within this
   * SbgnNamespaces object.
   *
   * @param xmlns the XML namespaces to be added.
   *
   * @copydetails doc_returns_success_code
   * @li @sbgnconstant{LIBSBGN_OPERATION_SUCCESS, OperationReturnValues_t}
   * @li @sbgnconstant{LIBSBGN_OPERATION_FAILED, OperationReturnValues_t}
   * @li @sbgnconstant{LIBSBGN_INVALID_OBJECT, OperationReturnValues_t}
   */
  int addNamespaces(const XMLNamespaces * xmlns);


  /**
   * Add an XML namespace (a pair of URI and prefix) to the set of namespaces
   * within this SbgnNamespaces object.
   * 
   * @param uri    the XML namespace to be added.
   * @param prefix the prefix of the namespace to be added.
   *
   * @copydetails doc_returns_success_code
   * @li @sbgnconstant{LIBSBGN_OPERATION_SUCCESS, OperationReturnValues_t}
   * @li @sbgnconstant{LIBSBGN_OPERATION_FAILED, OperationReturnValues_t}
   * @li @sbgnconstant{LIBSBGN_INVALID_OBJECT, OperationReturnValues_t}
   */
  int addNamespace(const std::string& uri, const std::string &prefix);


  /**
   * Removes an XML namespace from the set of namespaces within this 
   * SbgnNamespaces object.
   * 
   * @param uri    the XML namespace to be added.
   *
   * @copydetails doc_returns_success_code
   * @li @sbgnconstant{LIBSBGN_OPERATION_SUCCESS, OperationReturnValues_t}
   * @li @sbgnconstant{LIBSBGN_INDEX_EXCEEDS_SIZE, OperationReturnValues_t}
   */
  int removeNamespace(const std::string& uri);


  /**
   * Predicate returning @c true if the given URL is one of SBGN XML
   * namespaces.
   *
   * @param uri the URI of namespace
   *
   * @return @c true if the "uri" is one of SBGN namespaces, @c false otherwise.
   */
  static bool isSbgnNamespace(const std::string& uri);


  /**
   * Predicate returning @c true if the given set of namespaces represent a
   * valid set
   *
   * @return @c true if the set of namespaces is valid, @c false otherwise.
   */
  bool isValidCombination();


  /** @cond doxygenLibsbgnInternal */
  void setLevel(unsigned int level);


  void setVersion(unsigned int version);


  void setNamespaces(XMLNamespaces * xmlns);
  /** @endcond */

protected:  
  /** @cond doxygenLibsbgnInternal */
  void initSbgnNamespace();

  unsigned int    mLevel;
  unsigned int    mVersion;
  XMLNamespaces * mNamespaces;

  /** @endcond */
};

LIBSBGN_CPP_NAMESPACE_END

#endif  /* __cplusplus */


#ifndef SWIG

LIBSBGN_CPP_NAMESPACE_BEGIN
BEGIN_C_DECLS

/**
 * Creates a new SbgnNamespaces_t structure corresponding to the given SBGN
 * @p level and @p version.
 *
 * SbgnNamespaces_t structures are used in libSBGN to communicate SBGN Level
 * and Version data between constructors and other methods.  The
 * SbgnNamespaces_t structure class tracks 3-tuples (triples) consisting of
 * SBGN Level, Version, and the corresponding SBGN XML namespace.  Most
 * constructors for SBGN structures in libSBGN take a SbgnNamespaces_t structure
 * as an argument, thereby allowing the constructor to produce the proper
 * combination of attributes and other internal data structures for the
 * given SBGN Level and Version.
 *
 * The plural name "SbgnNamespaces" is not a mistake, because in SBGN
 * Level&nbsp;3, structures may have extensions added by Level&nbsp;3
 * packages used by a given model; however, until the introduction of
 * SBGN Level&nbsp;3, the SbgnNamespaces_t structure only records one SBGN
 * Level/Version/namespace combination at a time.
 *
 * @param level the SBGN level
 * @param version the SBGN version
 *
 * @return SbgnNamespaces_t structure created
 *
 * @ifnot hasDefaultArgs @htmlinclude warn-default-args-in-docs.html @endif@~
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
SbgnNamespaces_t *
SbgnNamespaces_create(unsigned int level, unsigned int version);


/**
 * Destroys this SbgnNamespaces_t structure.
 *
 * @param ns SbgnNamespaces_t structure to be freed.
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
void
SbgnNamespaces_free (SbgnNamespaces_t *ns);


/**
 * Get the SBGN Level of this SbgnNamespaces_t structure.
 *
 * @param sbgnns the SbgnNamespaces_t structure to query
 *
 * @return the SBGN Level of this SbgnNamespaces_t structure.
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
unsigned int
SbgnNamespaces_getLevel(SbgnNamespaces_t *sbgnns);


/**
 * Get the SBGN Version of this SbgnNamespaces_t structure.
 *
 * @param sbgnns the SbgnNamespaces_t structure to query
 *
 * @return the SBGN Version of this SbgnNamespaces_t structure.
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
unsigned int
SbgnNamespaces_getVersion(SbgnNamespaces_t *sbgnns);


/**
 * Get the SBGN Version of this SbgnNamespaces_t structure.
 *
 * @param sbgnns the SbgnNamespaces_t structure to query
 *
 * @return the XMLNamespaces_t structure of this SbgnNamespaces_t structure.
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
XMLNamespaces_t *
SbgnNamespaces_getNamespaces(SbgnNamespaces_t *sbgnns);


/**
 * Returns a string representing the SBGN XML namespace for the 
 * given @p level and @p version of SBGN.
 *
 * @param level the SBGN level
 * @param version the SBGN version
 *
 * @return a string representing the SBGN namespace that reflects the
 * SBGN Level and Version specified.
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
char *
SbgnNamespaces_getSbgnNamespaceURI(unsigned int level, unsigned int version);


/**
 * Add the XML namespaces list to the set of namespaces
 * within this SbgnNamespaces_t structure.
 * 
 * @param sbgnns the SbgnNamespaces_t structure to add to
 * @param xmlns the XML namespaces to be added.
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
int
SbgnNamespaces_addNamespaces(SbgnNamespaces_t *sbgnns,
                             const XMLNamespaces_t * xmlns);


/**
 * Returns an array of SBGN Namespaces supported by this version of 
 * LibSBGN. 
 *
 * @param length an integer holding the length of the array
 * @return an array of SBGN namespaces, or @c NULL if length is @c NULL. The array 
 *         has to be freed by the caller.
 *
 * @memberof SbgnNamespaces_t
 */
LIBSBGN_EXTERN
SbgnNamespaces_t **
SbgnNamespaces_getSupportedNamespaces(int *length);

END_C_DECLS
LIBSBGN_CPP_NAMESPACE_END

#endif  /* !SWIG */
#endif  /* SbgnNamespaces_h */
